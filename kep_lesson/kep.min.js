
function init() {
  console.log('New system')
  Moving=false;
  ecc = Number(eSlider.value);
  semia = Math.pow(10,Number(aSlider.value));
  PlanetMass =  Math.pow(10,Number(mSlider.value));
  mtot = 1 + PlanetMass;
  sfac  = PlanetMass/mtot;
  PlanetX = semia*(1-ecc)/mtot;
  PlanetY = 0;
  PlanetVx = 0;
  PlanetVy = Math.sqrt((1+ecc)*NewtG*mtot/(semia*(1-ecc)));
  vscale = Math.sqrt(NewtG*mtot);
  setScale();
  newSystem([PlanetX,PlanetY]);
}
function sliderChange() {
  eReadout.innerHTML = eSlider.value;
  aReadout.innerHTML = Math.pow(10,Number(aSlider.value)).toFixed(2)
  mReadout.innerHTML = (SuntoEarth*Math.pow(10,Number(mSlider.value))).toFixed(2);

  init();
}
function newSystem(inCoords,fromClick) {
  PlanetX = inCoords[0];
  PlanetY = inCoords[1];

  var coords = inCoords; //realCoords(inCoords)
  var rcoords = coords;

  if (fromClick) {
    semia = Math.sqrt(rcoords[0]*rcoords[0]+rcoords[1]*rcoords[1]);
    setTimeStep();
  }

  // var vabs =  Math.sqrt((1+ecc)*NewtG*mtot/(semia*(1-ecc)));
  // var theta = Math.atan2(rcoords[0],rcoords[1])
  // console.log([semia,vabs,theta])
  // PlanetVx = vabs*Math.cos(theta);
  // PlanetVy = vabs*Math.sin(theta);

  SunX = -PlanetX*PlanetMass;
  SunY = -PlanetY*PlanetMass;
  SunVx = - PlanetVx*PlanetMass;
  SunVy = -PlanetVy*PlanetMass;

  console.log(semia)
  console.log([SunX,SunY,PlanetX,PlanetY])


  totaltime = 0;
  count = 0;
  timeResolution = Math.pow(semia,1.5)/PointsPerOrbit;

  //   clearChart();
  //   updateChart();

  console.log('Sun: ' + SunX + ' ' + SunY + ' ' + SunVx + ' ' + SunVy )
  console.log('Planet: ' + PlanetX + ' ' + PlanetY + ' '+ PlanetVx + ' ' + PlanetVy )
  console.log('Timestep: ' + dt)
  clearTrails();

  drawObjs(fromClick);

}
// function realCoords(coords) {
//   return [coords[0] - theCanvas.width/2, coords[1] - theCanvas.height/2];
// }
function realCoords(coords) {
  return [coords[0]*AuPerPixel,coords[1]*AuPerPixel];
}
function canCoords(coords) {
  return [coords[0] + theCanvas.width/2, coords[1] + theCanvas.height/2];
}
function setScale() {
  var auBins = [.1, .3, 1,3, 10, 30, 100];
  for (var i=0; i<auBins.length; i++) {
    if (semia <= auBins[i] ) {
      AuPerPixel = 1.5*2*auBins[i]/theCanvas.width;
      break;
    }
  }
  setTimeStep();


}
function setTimeStep() {
  dt = Math.pow(semia*(1-ecc),1.5)/1000.;
  dt2 = dt*dt;
}
function clearTrails() {
  trailContext.clearRect(0, 0, trailCanvas.width, trailCanvas.height);
}
function drawObjs(fromClick) {

  var offX,offY
  if (fromClick) {
    offX = 0; offY = 0;
  }
  else {
    offX = theCanvas.width/2; offY = theCanvas.height/2;
  }

  var PlanetColor = "#2E2EFE";
  var PlanetSize = 10;
  var SunColor = "#FFFF00";
  var SunSize = 20;
  var cmColor = "black";
  var cmSize = 4;

  theContext.clearRect(0, 0, theCanvas.width, theCanvas.height);

  var pixelX,pixelY;


  pixelX = theCanvas.width/2  + SunX/AuPerPixel;
  pixelY = theCanvas.height/2+ SunY/AuPerPixel;
  theContext.beginPath();
  theContext.arc(pixelX,pixelY, SunSize, 0, 2*Math.PI);
  theContext.fillStyle = SunColor;
  theContext.fill();
  trailContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);



  pixelX = theCanvas.width/2 ;
  pixelY = theCanvas.height/2 ;
  theContext.beginPath();
  theContext.arc(pixelX,pixelY, cmSize, 0, 2*Math.PI);
  theContext.fillStyle = cmColor;
  theContext.fill();

  pixelX = offX + PlanetX/AuPerPixel;
  pixelY = offY + PlanetY/AuPerPixel;
  theContext.beginPath();
  theContext.arc(pixelX,pixelY,PlanetSize, 0, 2*Math.PI);
  theContext.fillStyle = PlanetColor;
  theContext.fill();
  trailContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);



}
function stopIntegration() {
  Moving = false;
}
function startIntegration() {
  Moving = true;
  chartx = 0;
  charty = PlanetX;
  SunVx = - PlanetVx*PlanetMass;
  SunVy = - PlanetVy*PlanetMass;


  moveSystem();
}
function computeAccel(sep) {
  var rad = Math.sqrt(sep[0]*sep[0] + sep[1]*sep[1]);
  var rad3 = rad*rad*rad;
  var fac = -NewtG*mtot/rad3;
  return [fac*sep[0],fac*sep[1]]
}
function moveSystem() {

  var sep = [ PlanetX-SunX, PlanetY-SunY];
  var vsep = [PlanetVx - SunVx, PlanetVy - SunVy];
  var accel = computeAccel(sep);

  sep[0] += vsep[0]*dt + .5*accel[0]*dt2;
  sep[1] += vsep[1]*dt + .5*accel[1]*dt2;

  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;

  accel = computeAccel(sep);
  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;


  PlanetVx = vsep[0]/mtot;
  PlanetVy = vsep[1]/mtot;
  PlanetX = sep[0]/mtot;
  PlanetY = sep[1]/mtot;

  SunVx = -vsep[0]*sfac;
  SunVy = -vsep[1]*sfac;
  SunX = -sep[0]*sfac;
  SunY = -sep[1]*sfac;

  drawObjs();

  totaltime += dt;
  count += dt;

  // if (count >= timeResolution) {
  //   chartx = totaltime;
  //   charty = PlanetX*VtoKms;
  //   updateChart();
  //   count = 0;
  // }



  if (Moving) {
    timer = window.setTimeout(moveSystem, 1000/30);
  }



}
function setPlanetV(sep) {
  var dx = sep[0];
  var dy = sep[1];
  var r = Math.sqrt(dx*dx + dy*dy);
  var theta = Math.atan2(dx,dy);

  PlanetVx = vscale * r * Math.cos(theta);
  PlanetVy = vscale * r * Math.sin(theta);

}
function drawLine(event) {

    context = this.getContext('2d');
    // var coords = getCursorPosition(event)
    // coords[0] -= event.layerX;
    // coords[1] -= event.layerY;
    var coords = [event.layerX, event.layerY] // May need a better way


    if (clicks != 1) {
        console.log('New click: ' + coords + ' ' + realCoords(coords))
        newSystem(realCoords(coords),true); // Clear Canvas and draw new planet
        clicks++;
    } else {
        context.beginPath();
        context.moveTo(lastClick[0], lastClick[1]);
        context.lineTo(coords[0], coords[1], 6);
        context.strokeStyle = '#000000';
        context.stroke();

        setPlanetV(realCoords([coords[0]-lastClick[0],coords[1]-lastClick[1]]));

        clicks = 0;
    }
    lastClick = coords;
};
// function initVars() {
//   showNewVars();
//
//   ecc = Number(eSlider.value);
//   semia = Math.pow(10,Number(aSlider.value));
//   PlanetMass =  Math.pow(10,Number(mSlider.value));
//
//   mtot = 1 + PlanetMass;
//   ReducedMass = PlanetMass/mtot;
//   sfac = PlanetMass/mtot;
//
//
//   PlanetX = semia*(1-ecc)/(1+PlanetMass);
//   PlanetY = 0;
//   PlanetVx = 0;
//   PlanetVy = Math.sqrt((1+ecc)*NewtG*mtot/(semia*(1-ecc)));
//   PlanetVy /= (1+PlanetMass);
//
//   SunX = -PlanetX*PlanetMass;
//   SunY = -PlanetY*PlanetMass;
//   SunVx = - PlanetVx*PlanetMass;
//   SunVy = - PlanetVy*PlanetMass;
//
//   chartx = 0;
//   charty = SunVy* VtoKms;
//
//
//
//   setScale();
//
//   drawObjs();
//   clearTrails();
//   Moving = true;
//
//   dt = Math.pow(semia*(1-ecc),1.5)/1000.;
//   dt2 = dt*dt;
//   totaltime = 0;
//   count = 0;
//   timeResolution = Math.pow(semia,1.5)/PointsPerOrbit;
//
//   clearChart();
//   updateChart();
//
//   moveSystem();
//
//
// }

//

// function calcReducedMass() {
//   ReducedMass = PlanetMass/(1 + PlanetMass);
// }
//

//
//
//

//

//

//

//
//

//
//
// function clearChart() {
//   try {
//     chart.destroy();
//
//   }
//   catch (err) {
//   }
//
//   dps = [{x:chartx,y:charty}];
//   chart = new CanvasJS.Chart("chartContainer",{
//     theme: "theme1",
//     title :{
//       text: "Position of planet (AU) vs Time (yrs)",
//     },
//     axisX :{
//       text: "Time (yrs)",
//     },
//     axisY : {
//       text: 'X (km/s)',
//     },
//     data: [{
//       label:"x",
//       type: "line",
//       dataPoints: dps
//     }]
//   });
//
// }
//
//
// function updateChart() {
//   // count is number of times loop runs to generate random dataPoints.
//     dps.push({
//       x: chartx,
//       y: charty
//     });
//
//
//   if (dps.length > dataLength)
//   {
//     dps.shift();
//   }
//
//   chart.render();
//
// };
//
//
//

//
