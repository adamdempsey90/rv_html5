

function initVars() {
//        window.clearTimeout(timer);
  showNewVars();

  ecc = Number(eSlider.value);
  semia = Math.pow(10,Number(aSlider.value));
  PlanetMass =  Math.pow(10,Number(mSlider.value));

  mtot = 1 + PlanetMass;
  ReducedMass = PlanetMass/mtot;
  sfac = PlanetMass/mtot;


  PlanetX = semia*(1-ecc)/(1+PlanetMass);
  PlanetY = 0;
  PlanetVx = 0;
  PlanetVy = Math.sqrt((1+ecc)*NewtG*mtot/(semia*(1-ecc)));
  PlanetVy /= (1+PlanetMass);
//        PlanetVy = Math.sqrt(mtot*(1+ecc)/(semia*(1-ecc)));

  SunX = -PlanetX*PlanetMass;
  SunY = -PlanetY*PlanetMass;
  SunVx = - PlanetVx*PlanetMass;
  SunVy = - PlanetVy*PlanetMass;

  chartx = 0;
  charty = SunVy* VtoKms;



  setScale();

  drawSun();
  drawPlanet();
  clearTrails();
  Moving = true;

  dt = Math.pow(semia*(1-ecc),1.5)/1000.;
  dt2 = dt*dt;
  totaltime = 0;
  count = 0;
  timeResolution = Math.pow(semia,1.5)/PointsPerOrbit;

  clearChart();
  updateChart();

  moveSystem();


}
function setScale() {
  var nb;
  var auBins = [.1, .3, 1,3, 10, 30, 100];
  for (var i=0; i<auBins.length; i++) {
    if (semia <= auBins[i] ) {
      AuPerPixel = 1.5*2*auBins[i]/theSunCanvas.width;
      break;
    }
  }
}
function stopIntegration() {
  Moving = false;
}
function calcReducedMass() {
  ReducedMass = PlanetMass/(1 + PlanetMass);
}


function drawSun() {

  var pixelX = theSunCanvas.width/2 + SunX/AuPerPixel;
  var pixelY = theSunCanvas.height/2 + SunY/AuPerPixel;

  theSunContext.clearRect(0, 0, theSunCanvas.width, theSunCanvas.height);
  theSunContext.beginPath();
  theSunContext.arc(pixelX,pixelY, 10, 0, 2*Math.PI);
  theSunContext.fillStyle = "#FFFF00"
  theSunContext.fill();
  trailSunContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);

}

function drawPlanet() {
  var pixelX = thePlanetCanvas.width/2 + PlanetX/AuPerPixel;
  var pixelY = thePlanetCanvas.height/2 + PlanetY/AuPerPixel;

  thePlanetContext.clearRect(0, 0, thePlanetCanvas.width, thePlanetCanvas.height);
  thePlanetContext.beginPath();
  thePlanetContext.arc(pixelX,pixelY, 10, 0, 2*Math.PI);
  thePlanetContext.fillStyle = "#2E2EFE";
  thePlanetContext.fill();
  trailPlanetContext.fillRect(pixelX-0.5, pixelY-0.5, 1, 1);

}

function moveSystem() {



  var sep = [ PlanetX-SunX, PlanetY-SunY];
  var vsep = [PlanetVx - SunVx, PlanetVy - SunVy];
  var accel = computeAccel(sep);


  sep[0] += vsep[0]*dt + .5*accel[0]*dt2;
  sep[1] += vsep[1]*dt + .5*accel[1]*dt2;

  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;

  accel = computeAccel(sep);
  vsep[0] += .5*accel[0]*dt;
  vsep[1] += .5*accel[1]*dt;


  PlanetVx = vsep[0]/mtot;
  PlanetVy = vsep[1]/mtot;
  PlanetX = sep[0]/mtot;
  PlanetY = sep[1]/mtot;

  SunVx = -vsep[0]*sfac;
  SunVy = -vsep[1]*sfac;
  SunX = -sep[0]*sfac;
  SunY = -sep[1]*sfac;
  drawSun();
  drawPlanet();

  totaltime += dt;
  count += dt;

  if (count >= timeResolution) {
    chartx = totaltime;
    charty = PlanetX*VtoKms;
    updateChart();
    count = 0;
  }



  if (Moving) {
    timer = window.setTimeout(moveSystem, 1000/30);
  }



}

function computeAccel(sep) {
  var rad = Math.sqrt(sep[0]*sep[0] + sep[1]*sep[1]);
  var rad3 = rad*rad*rad;
  var fac = -NewtG*mtot/rad3;
  return [fac*sep[0],fac*sep[1]]
}

function showNewVars() {
  eReadout.innerHTML = eSlider.value;
  aReadout.innerHTML = Math.pow(10,Number(aSlider.value)).toFixed(2)
  mReadout.innerHTML = (SuntoEarth*Math.pow(10,Number(mSlider.value))).toFixed(2);
}


function clearTrails() {
  trailPlanetContext.clearRect(0, 0, thePlanetCanvas.width, thePlanetCanvas.height);
  trailSunContext.clearRect(0, 0, theSunCanvas.width, theSunCanvas.height);
}


function clearChart() {
  try {
    chart.destroy();

  }
  catch (err) {
  }

  dps = [{x:chartx,y:charty}];
  chart = new CanvasJS.Chart("chartContainer",{
    theme: "theme1",
    title :{
      text: "Position of planet (AU) vs Time (yrs)",
    },
    axisX :{
      text: "Time (yrs)",
    },
    axisY : {
      text: 'X (km/s)',
    },
    data: [{
      label:"x",
      type: "line",
      dataPoints: dps
    }]
  });

}


function updateChart() {
  // count is number of times loop runs to generate random dataPoints.
    dps.push({
      x: chartx,
      y: charty
    });


  if (dps.length > dataLength)
  {
    dps.shift();
  }

  chart.render();

};


function getCursorPosition(e) {
    var x;
    var y;

    if (e.pageX != undefined && e.pageY != undefined) {
        x = e.pageX;
        y = e.pageY;
    } else {
        x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }

    return [x, y];
}

function drawLine(e) {
    console.log('in')
    context = this.getContext('2d');

    x = getCursorPosition(e)[0] - this.offsetLeft;
    y = getCursorPosition(e)[1] - this.offsetTop;

    if (clicks != 1) {
        clicks++;
    } else {
        context.beginPath();
        context.moveTo(lastClick[0], lastClick[1]);
        context.lineTo(x, y, 6);

        context.strokeStyle = '#000000';
        context.stroke();

        clicks = 0;
    }

    lastClick = [x, y];
};
